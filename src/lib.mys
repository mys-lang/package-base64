def _index_to_encoded(index: u8) -> u8:
    if 0 <= index and index <= 25:
        return u8(i32('A') + i32(index) - 0)
    elif 26 <= index and index <= 51:
        return u8(i32('a') + i32(index) - 26)
    elif 52 <= index and index <= 61:
        return u8(i32('0') + i32(index) - 52)
    elif index == 62:
        return u8(i32('+'))
    elif index == 63:
        return u8(i32('/'))
    else:
        return u8(i32('='))

def _encoded_to_index(encoded: char) -> u8:
    if 'A' <= encoded and encoded <= 'Z':
        return u8(0 + i32(encoded) - i32('A'))
    elif 'a' <= encoded and encoded <= 'z':
        return u8(26 + i32(encoded) - i32('a'))
    elif '0' <= encoded and encoded <= '9':
        return u8(52 + i32(encoded) - i32('0'))
    elif encoded == '+':
        return 62
    elif encoded == '/':
        return 63
    elif encoded == '=':
        return 64
    else:
        raise ValueError()

def encode(data: bytes) -> string:
    """Encode given data.

    """

    encoded = b""
    length = i64(len(data))

    for i in range(0, length, 3):
        index = (data[i + 0] & 0xfc) >> 2
        encoded += _index_to_encoded(index)
        index = ((data[i + 0] & 0x03) << 4)

        if i + 1 < length:
            index |= (data[i + 1] & 0xf0) >> 4
            encoded += _index_to_encoded(index)
            index = (data[i + 1] & 0x0f) << 2

            if i + 2 < length:
                index |= (data[i + 2] & 0xc0) >> 6
                encoded += _index_to_encoded(index)
                index = data[i + 2] & 0x3f
                encoded += _index_to_encoded(index)
            else:
                encoded += _index_to_encoded(index)
                encoded += _index_to_encoded(64)
        else:
            encoded += _index_to_encoded(index)
            encoded += _index_to_encoded(64)
            encoded += _index_to_encoded(64)

    return string(encoded)

def decode(data: string) -> bytes:
    """Decode given base64 encoded data.

    """

    length = i64(len(data))

    if (length % 4) != 0:
        raise ValueError()

    decoded = b""

    for i in range(0, length, 4):
        v0 = _encoded_to_index(data[i + 0])
        v1 = _encoded_to_index(data[i + 1])
        v2 = _encoded_to_index(data[i + 2])
        v3 = _encoded_to_index(data[i + 3])

        if v0 == 64 or v1 == 64:
            raise ValueError()
        elif v2 == 64:
            decoded += (v0 << 2) | (v1 >> 4)
        elif v3 == 64:
            decoded += (v0 << 2) | (v1 >> 4)
            decoded += (v1 << 4) | (v2 >> 2)
        else:
            decoded += (v0 << 2) | (v1 >> 4)
            decoded += (v1 << 4) | (v2 >> 2)
            decoded += (v2 << 6) | (v3 >> 0)

    return decoded

@test
def test_various():
    datas = [
        ("", b""),
        ("Zg==", b"f"),
        ("Zm8=", b"fo"),
        ("Zm9v", b"foo"),
        ("Zm9vYg==", b"foob"),
        ("Zm9vYmE=", b"fooba"),
        ("Zm9vYmFy", b"foobar"),
        (
            "TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCB"
            "ieSB0aGlzIHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaC"
            "BpcyBhIGx1c3Qgb2YgdGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZ"
            "GVsaWdodCBpbiB0aGUgY29udGludWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmVyYXRp"
            "b24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRoZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW5"
            "5IGNhcm5hbCBwbGVhc3VyZS4=",
            b"Man is distinguished, not only by his reason, but by this singular"
            b" passion from other animals, which is a lust of the mind, that by "
            b"a perseverance of delight in the continued and indefatigable gener"
            b"ation of knowledge, exceeds the short vehemence of any carnal plea"
            b"sure."
        ),
        ("TQ==", b"M"),
        ("TWE=", b"Ma"),
        ("TWFu", b"Man")
    ]

    for encoded, decoded in datas:
        assert encode(decoded) == encoded
        assert decode(encoded) == decoded
