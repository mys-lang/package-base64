class Base64Error(Error):
    message: string

func _index_to_encoded(index: u8) -> u8:
    if 0 <= index and index <= 25:
        return u8(i32('A') + i32(index) - 0)
    elif 26 <= index and index <= 51:
        return u8(i32('a') + i32(index) - 26)
    elif 52 <= index and index <= 61:
        return u8(i32('0') + i32(index) - 52)
    elif index == 62:
        return u8(i32('+'))
    elif index == 63:
        return u8(i32('/'))
    else:
        return u8(i32('='))

func _encoded_to_index(encoded: u8) -> u8:
    if u8(i32('A')) <= encoded and encoded <= u8(i32('Z')):
        return encoded - u8(i32('A'))
    elif u8(i32('a')) <= encoded and encoded <= u8(i32('z')):
        return 26 + encoded - u8(i32('a'))
    elif u8(i32('0')) <= encoded and encoded <= u8(i32('9')):
        return 52 + encoded - u8(i32('0'))
    elif encoded == u8(i32('+')):
        return 62
    elif encoded == u8(i32('/')):
        return 63
    elif encoded == u8(i32('=')):
        return 64
    else:
        raise Base64Error(f"Invalid value {encoded}.")

func encode(data: bytes) -> string:
    """Encode given data.

    """

    return string(encode_bytes(data))

func decode(data: string) -> bytes:
    """Decode given base64 encoded data.

    """

    return decode_bytes(data.to_utf8())

func encode_bytes(data: bytes) -> bytes:
    """Encode given data.

    """

    encoded = b""
    length = i64(len(data))
    encoded.reserve(4 * ((length + 2) / 3))

    for i in range(0, length, 3):
        index = (data[i + 0] & 0xfc) >> 2
        encoded += _index_to_encoded(index)
        index = ((data[i + 0] & 0x03) << 4)

        if i + 1 < length:
            index |= (data[i + 1] & 0xf0) >> 4
            encoded += _index_to_encoded(index)
            index = (data[i + 1] & 0x0f) << 2

            if i + 2 < length:
                index |= (data[i + 2] & 0xc0) >> 6
                encoded += _index_to_encoded(index)
                index = data[i + 2] & 0x3f
                encoded += _index_to_encoded(index)
            else:
                encoded += _index_to_encoded(index)
                encoded += _index_to_encoded(64)
        else:
            encoded += _index_to_encoded(index)
            encoded += _index_to_encoded(64)
            encoded += _index_to_encoded(64)

    return encoded

func decode_bytes(data: bytes) -> bytes:
    """Decode given base64 encoded data.

    """

    length = i64(len(data))

    if (length % 4) != 0:
        raise Base64Error(f"Length {length} not multiple of 4.")

    decoded = b""
    decoded.reserve(3 * length / 4)

    for i in range(0, length, 4):
        v0 = _encoded_to_index(data[i + 0])
        v1 = _encoded_to_index(data[i + 1])
        v2 = _encoded_to_index(data[i + 2])
        v3 = _encoded_to_index(data[i + 3])

        if v0 == 64 or v1 == 64:
            raise Base64Error(f"Bad value 64 at first of second index.")
        elif v2 == 64:
            decoded += (v0 << 2) | (v1 >> 4)
        elif v3 == 64:
            decoded += (v0 << 2) | (v1 >> 4)
            decoded += (v1 << 4) | (v2 >> 2)
        else:
            decoded += (v0 << 2) | (v1 >> 4)
            decoded += (v1 << 4) | (v2 >> 2)
            decoded += (v2 << 6) | (v3 >> 0)

    return decoded

@test
func test_various():
    datas = [
        ("", b""),
        ("Zg==", b"f"),
        ("Zm8=", b"fo"),
        ("Zm9v", b"foo"),
        ("Zm9vYg==", b"foob"),
        ("Zm9vYmE=", b"fooba"),
        ("Zm9vYmFy", b"foobar"),
        (
            "TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCB"
            "ieSB0aGlzIHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaC"
            "BpcyBhIGx1c3Qgb2YgdGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZ"
            "GVsaWdodCBpbiB0aGUgY29udGludWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmVyYXRp"
            "b24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRoZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW5"
            "5IGNhcm5hbCBwbGVhc3VyZS4=",
            b"Man is distinguished, not only by his reason, but by this singular"
            b" passion from other animals, which is a lust of the mind, that by "
            b"a perseverance of delight in the continued and indefatigable gener"
            b"ation of knowledge, exceeds the short vehemence of any carnal plea"
            b"sure."
        ),
        ("TQ==", b"M"),
        ("TWE=", b"Ma"),
        ("TWFu", b"Man")
    ]

    for encoded, decoded in datas:
        assert encode(decoded) == encoded
        assert decode(encoded) == decoded

@test
func test_various_bytes():
    datas = [
        (b"", b""),
        (b"Zg==", b"f"),
        (b"Zm8=", b"fo"),
        (b"Zm9v", b"foo"),
        (b"Zm9vYg==", b"foob"),
        (b"Zm9vYmE=", b"fooba"),
        (b"Zm9vYmFy", b"foobar"),
        (
            b"TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCB"
            b"ieSB0aGlzIHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaC"
            b"BpcyBhIGx1c3Qgb2YgdGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZ"
            b"GVsaWdodCBpbiB0aGUgY29udGludWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmVyYXRp"
            b"b24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRoZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW5"
            b"5IGNhcm5hbCBwbGVhc3VyZS4=",
            b"Man is distinguished, not only by his reason, but by this singular"
            b" passion from other animals, which is a lust of the mind, that by "
            b"a perseverance of delight in the continued and indefatigable gener"
            b"ation of knowledge, exceeds the short vehemence of any carnal plea"
            b"sure."
        ),
        (b"TQ==", b"M"),
        (b"TWE=", b"Ma"),
        (b"TWFu", b"Man")
    ]

    for encoded, decoded in datas:
        assert encode_bytes(decoded) == encoded
        assert decode_bytes(encoded) == decoded

@test
func test_decode_bad_length():
    try:
        decode("1")
        assert False
    except Base64Error as error:
        assert error.message == "Length 1 not multiple of 4."

@test
func test_decode_bad_value():
    try:
        decode_bytes(b"-234")
        assert False
    except Base64Error as error:
        assert error.message == "Invalid value 45."

    try:
        decode_bytes(b"====")
        assert False
    except Base64Error as error:
        assert error.message == "Bad value 64 at first of second index."
